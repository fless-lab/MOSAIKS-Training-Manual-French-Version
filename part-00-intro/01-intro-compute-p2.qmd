---

## Accès aux notebooks du cours

Tous les notebooks du cours sont hébergés sur GitHub et peuvent être accédés directement dans Google Colab. Il y a deux façons de les ouvrir :

### Méthode 1 : Liens directs

Chaque section de ce manuel inclut des liens directs **"Open in Colab"** pour les notebooks pertinents. Cliquez simplement sur le badge pour ouvrir le notebook :

Exemple [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/microsoft/PlanetaryComputerExamples/blob/main/tutorials/mosaiks.ipynb)

Cette méthode ouvrira une nouvelle copie du notebook tel qu'il est sauvegardé sur GitHub. Si vous avez déjà cliqué sur le badge une fois, fait des modifications et sauvegardé votre notebook, vous devrez naviguer vers votre dossier Drive où il est sauvegardé pour accéder à ces modifications.

::: {.callout-warning}
Cliquer sur le badge dans ce manuel ouvrira toujours une nouvelle copie.
:::

### Méthode 2 : Cloner le notebook

Pour sélectionner un notebook depuis le repository [Repository de notebooks](https://github.com/cullen-molitor/MOSAIKS-Training-Manual/tree/main/notebooks/demo) :

1. Ouvrez Google Colab ([colab.research.google.com](https://colab.research.google.com))
2. Cliquez sur `File` > `Open Notebook`
3. Sélectionnez l'onglet **GitHub**
4. Entrez l'URL du repository : `https://github.com/[username]/[repo]` (À METTRE À JOUR AVEC LE REPO)
5. Sélectionnez le notebook que vous voulez ouvrir

### Sauvegarder votre travail

Quand vous ouvrez un notebook depuis GitHub dans Colab, il crée une copie temporaire. Pour sauvegarder votre travail :

1. Cliquez sur `File` > `Save a copy in Drive`
2. Cela crée votre propre copie éditable dans votre Google Drive
3. Toutes les modifications futures seront sauvegardées dans votre copie

### Organisation des notebooks

Les notebooks du cours sont organisés en :

- `demos/` : Notebooks de démonstration complets
- `exercises/` : Notebooks interactifs avec des exercices à compléter
- `solutions/` : Versions complètes des notebooks d'exercices

Chaque notebook inclut :

- Des instructions et explications claires dans les cellules markdown
- Des cellules de code avec des exemples ou des exercices
- Des sections TO DO pour les exercices
- Des cellules de validation pour vérifier votre travail

--- 

## Accès et gestion des données

Il y a plusieurs façons d'accéder aux données dans les notebooks Colab. Voici les principales approches :

### Téléchargements directs

Pour les données hébergées sur des repositories comme Zenodo, vous pouvez télécharger directement en utilisant `wget` :

```python
# Télécharger les données
!wget https://zenodo.org/records/14040658/files/Data.zip

# Décompresser les données
!unzip Data.zip
```

### Intégration Google Drive

#### Monter Google Drive

Pour les données stockées dans Google Drive :

1. D'abord, montez votre Google Drive :
   ```python
   from google.colab import drive
   drive.mount('/content/drive')
   ```

2. Accédez à vos données en utilisant le chemin monté :
   ```python
   drive_path = "/content/drive/MyDrive/<project_folder>"
   ```

#### Copier les données vers la VM (optionnel)

Pour de meilleures performances, faites des copies locales des données sur la machine virtuelle (VM) :

```python
import os
import shutil

# Créer un répertoire local
local_dir = "/content/data/"
os.makedirs(local_dir, exist_ok=True)

# Copier les données depuis Drive vers la VM
drive_data = os.path.join(drive_path, "my_data") 
shutil.copytree(drive_data, local_dir, dirs_exist_ok=True)
```

::: {.callout-note}
N'oubliez pas que le stockage de la VM est temporaire - les fichiers seront supprimés lorsque le runtime se déconnectera. Conservez toujours une copie de sauvegarde de vos données dans Drive ou un autre emplacement de stockage permanent.
:::

##### Pourquoi copier les données vers la VM ?

Lorsque vous travaillez avec des données dans Colab, copier les fichiers depuis Google Drive vers la machine virtuelle (VM) peut améliorer considérablement les performances :

1. **Accès plus rapide** : La lecture directe depuis Google Drive nécessite que les données soient transférées sur le réseau pour chaque opération. Le stockage local de la VM offre des vitesses de lecture/écriture beaucoup plus rapides.
2. **Latence réduite** : La latence réseau entre Colab et Google Drive peut ralentir les opérations qui nécessitent un accès multiple aux données. L'accès local élimine cette latence.
3. **Plus fiable** : Les problèmes de connectivité réseau ou d'accès à Drive ne perturberont pas votre analyse une fois que les données sont copiées localement.
4. **Meilleur pour le traitement itératif** : Si votre code doit lire les mêmes données plusieurs fois (comme dans les boucles d'entraînement de l'apprentissage automatique), l'accès local est beaucoup plus efficace.

Par exemple, la lecture d'un jeu de données de 1 Go depuis Drive peut prendre 30 secondes, tandis que la lecture depuis le stockage local de la VM pourrait prendre seulement quelques secondes. Le temps passé à copier les données une fois au début de votre session peut économiser beaucoup de temps pendant l'analyse. C'est particulièrement vrai dans un environnement de notebook où un utilisateur peut développer du code qui accède plusieurs fois aux mêmes fichiers de données, mais ne peut pas les stocker tous en mémoire (par exemple, de nombreuses images).

#### Sauvegarder les sorties dans Google Drive

Pour sauvegarder les sorties ou les modèles dans Google Drive :

```python
# Définir le répertoire de sortie
output_dir = "/content/drive/MyDrive/project_folder/output"

# Sauvegarder les sorties
shutil.copytree(local_output, output_dir, dirs_exist_ok=True)
```

Cela garantit que tout travail effectué dans le notebook est sauvegardé dans votre Google Drive pour référence future. Si les fichiers de sortie ne sont pas copiés et restent dans la VM, ils seront perdus lorsque le runtime se déconnectera.

---

## Configuration de l'environnement local 

Bien que l'approche principale de ce manuel soit d'utiliser Google Colab, certains apprenants peuvent préférer ou avoir besoin d'exécuter du code localement. Le manuel est largement configuré pour le faire, bien que l'utilisateur doive gérer son propre environnement de calcul. À cette fin, nous fournissons un fichier `environment.yml` (situé dans le répertoire `environment` de ce manuel). Voici les étapes pour configurer votre environnement local avec Miniconda et créer un environnement local.

::: {.callout-note}
Bien que les environnements locaux puissent offrir plus de contrôle, nous recommandons fortement Google Colab pour la cohérence et les ressources cloud gratuites. Cette configuration locale est purement facultative et peut être plus adaptée à ceux qui ont des dépendances particulières ou des configurations avancées.
:::

### Télécharger et installer Miniconda

Miniconda est un installateur minimal pour conda. Choisissez l'installateur pour votre système d'exploitation dans les liens ci-dessous et suivez les invites.

::: {.panel-tabset}

## Windows

1. Allez sur [Miniconda Windows Installer](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links).
2. Téléchargez l'installateur `.exe` pour votre système Windows (64-bit recommandé).
3. Double-cliquez sur l'installateur et suivez les instructions à l'écran.
4. Quand on vous le demande, cochez l'option pour **ajouter Miniconda au PATH** ou sélectionnez “Installer pour tous les utilisateurs” qui ajoute généralement conda au PATH automatiquement.

## macOS

1. Allez sur [Miniconda macOS Installer](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links).
2. Téléchargez l'installateur `.pkg` (ou `.sh` si vous préférez) pour macOS (64-bit).
3. Double-cliquez sur l'installateur et suivez les instructions à l'écran.
4. Quand on vous le demande, cochez l'option pour **ajouter Miniconda au PATH** ou ajoutez les lignes de chemin appropriées à votre fichier `~/.zshrc` ou `~/.bash_profile` manuellement.

## Linux

1. Allez sur [Miniconda Linux Installer](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links).
2. Téléchargez l'installateur `.sh` pour votre distribution Linux (64-bit recommandé).
3. Ouvrez un terminal et exécutez `bash Miniconda3-latest-Linux-x86_64.sh`.
4. Suivez les invites ; considérez l'option d'initialiser Miniconda pour votre shell (ajouter conda au PATH).

:::

### Ajouter conda à votre PATH

Si vous n'avez pas ajouté conda à votre PATH pendant l'installation, vous pouvez le faire manuellement en ajoutant une ligne à votre fichier de configuration du shell (`~/.bashrc`, `~/.zshrc`, ou similaire) :

```bash
# Exemple pour les utilisateurs Linux/macOS
export PATH="$HOME/miniconda3/bin:$PATH"
```

Pour Windows, assurez-vous d'avoir sélectionné l'option pour ajouter conda au PATH pendant l'installation, ou exécutez l'**Anaconda Prompt** (qui a automatiquement conda disponible) pour gérer votre environnement.

### Créer un environnement local à partir de `environment.yml`

Dans le répertoire `environment` du repository du cours, vous trouverez un fichier nommé `environment.yml`. Ce fichier liste tous les packages nécessaires pour la configuration locale.

1. **Clonez ou téléchargez** le repository du cours sur votre machine locale.
2. **Ouvrez un terminal** (ou **Anaconda Prompt** sous Windows).
3. **Accédez** au dossier contenant `environment.yml`.

   ```bash
   cd chemin/vers/MOSAIKS-Training-Manual/environment
   ```

4. **Créez** l'environnement :

   ```bash
   conda env create -f environment.yml
   ```

5. **Activez** l'environnement :

   ```bash
   conda activate mosaiks
   ```

   Où `mosaiks` est le nom spécifié dans `environment.yml` (vérifiez le champ `name:` dans le fichier).

### Utiliser le nouvel environnement dans VS Code

Visual Studio Code (VS Code) peut détecter et utiliser votre nouvel environnement conda pour le développement Python.

1. **Ouvrez VS Code**.
2. Installez l'**extension Python** (si elle n'est pas déjà installée).
3. Appuyez sur **Ctrl+Shift+P** (ou **Cmd+Shift+P** sous macOS) et tapez **“Python: Select Interpreter”**.
4. Sélectionnez l'interpréteur associé à votre nouvel environnement (il devrait être listé par nom ou chemin).
5. Ouvrez ou créez un nouveau fichier Python ou notebook, et vérifiez que VS Code utilise l'environnement correct (vous pouvez voir l'environnement choisi dans le coin inférieur droit de VS Code).

### Autres gestionnaires d'environnement

Bien que conda soit un outil courant pour gérer les environnements Python, il existe d'autres options populaires comme :

- [Poetry](https://python-poetry.org/)  
- [pipenv](https://pipenv.pypa.io/en/latest/)  
- [virtualenv](https://virtualenv.pypa.io/en/latest/) 

Chacun a ses propres fichiers de configuration et instructions d'installation. Si vous préférez ces outils ou les utilisez déjà, vous pouvez généralement répliquer les packages listés dans `environment.yml`. Consultez la documentation respective de l'outil pour des instructions spécifiques sur la traduction des dépendances.

---

::: {.callout-note}
# Prochaine étape

Dans le chapitre suivant, nous allons examiner de plus près le framework MOSAIKS, ses concepts clés et comment il peut être appliqué pour résoudre des problèmes du monde réel.
:::