# Configuration informatique {#sec-intro-compute}

## Vue d'ensemble

Ce cours utilise principalement Google Colaboratory ([Colab](https://colab.research.google.com/)) pour nos besoins en calcul. Colab est une plateforme gratuite basée sur le cloud qui permet d'écrire et d'exécuter du code Python via votre navigateur. Il est livré avec de nombreuses bibliothèques préinstallées et offre un accès gratuit aux ressources de calcul, y compris les GPUs.

---

## Prérequis

Pour participer aux parties de programmation de ce cours, vous aurez besoin de :

- Un ordinateur portable ou de bureau
- Une connexion Internet fiable
- Un compte Google (si vous n'en avez pas, créez-en un sur [accounts.google.com](https://accounts.google.com))
- Un navigateur web (navigateurs basés sur [Chromium](https://en.wikipedia.org/wiki/Chromium_(web_browser)) recommandés)

---

## Débuter avec Google Colab

### Accéder à Colab

1. Allez sur [colab.research.google.com](https://colab.research.google.com)
2. Connectez-vous avec votre compte Google
3. Cliquez sur **"Nouveau Notebook"** pour créer votre premier notebook Colab

### Comprendre l'interface

L'interface Colab est similaire aux notebooks Jupyter, avec quelques éléments clés :

- **Barre de menu** : Contient les options `Fichier`, `Édition`, `Affichage`, `Insertion`, `Runtime`, `Outils` et `Aide`.
- **Barre d'outils** : Accès rapide aux actions courantes comme l'ajout de cellules de code/texte.
- **Zone des cellules** : Où vous écrivez et exécutez le code ou le texte.
- **État du runtime** : Montre l'état de la connexion de votre notebook aux serveurs Google.

### Opérations de base

1. **Créer des cellules** :
   - Cellules de code : Cliquez sur `+ Code`. Supporte Python ou R selon le runtime sélectionné
   - Cellules de texte : Cliquez sur `+ Texte`. Supporte Markdown et les balises HTML pour la documentation

2. **Exécuter des cellules** :
   - Cliquez sur le bouton lecture à côté de la cellule ou utilisez `Shift`+`Enter`
   - Vous pouvez aussi sélectionner `Runtime` > `Exécuter la cellule sélectionnée` dans le menu

### Fonctionnalités importantes

1. **Type de Runtime** :
   - Cliquez sur `Runtime` > `Modifier le type de runtime`
   - Sélectionnez `Python 3` comme runtime
   - Pour l'accès GPU : Changez l'accélérateur matériel pour un des types `GPU` proposés si nécessaire

2. **Gestion des fichiers** :
   - Les fichiers téléchargés sur Colab sont temporaires et seront perdus à la déconnexion du runtime
   - Connectez-vous à Google Drive et sauvegardez les sorties pour un stockage permanent :
     ```python
     from google.colab import drive
     drive.mount('/content/drive')
     ```

3. **Installation des packages :**

Installez des packages supplémentaires en utilisant :

::: {.panel-tabset}
## conda
```python
# Attention : utiliser "!conda install" n'est pas recommandé. 
# En règle générale, utilisez la commande magique "%conda install"
%conda install <nom_package>
```
## pip
```python
# Attention : utiliser "!pip install" n'est pas recommandé. 
# En règle générale, utilisez la commande magique "%pip install"
%pip install <nom_package>
```
:::

### Bonnes pratiques

1. **Sauvegardez votre travail** :
   - Les liens dans ce livre créeront une nouvelle copie d'un notebook tel qu'il est sauvegardé sur GitHub
   - Pour sauvegarder vos modifications, cliquez sur `Fichier` > `Enregistrer une copie dans Drive`
   - Téléchargez localement les notebooks importants comme sauvegardes

2. **Gestion des ressources** :
   - Fermez les notebooks inutilisés pour libérer des ressources
   - Soyez conscient des délais d'inactivité (les notebooks se déconnectent après une période d'inactivité)

3. **Utilisation de la mémoire** :
   - Surveillez l'utilisation de la mémoire via `Runtime` > `Voir les ressources`
   - La version gratuite de Colab fournit une mémoire très limitée (12GB) qui peut être insuffisante pour les grands jeux de données ou les modèles complexes

### Raccourcis clavier

Voici quelques raccourcis clavier utiles pour travailler dans Colab :

::: {.panel-tabset}

## Windows/Linux

| Raccourci      | Action                          |
|----------------|:--------------------------------|
| Ctrl+M H       | Voir les raccourcis clavier     |
| Ctrl+Enter     | Exécuter la cellule courante    |
| Shift+Enter    | Exécuter et passer à la suivante|
| Alt+Enter      | Exécuter et insérer dessous     |
| Ctrl+M A       | Insérer cellule code au-dessus  |
| Ctrl+M B       | Insérer cellule code en-dessous |
| Ctrl+M M       | Convertir en cellule texte      |
| Ctrl+M Y       | Convertir en cellule code       |
| Ctrl+M D       | Supprimer la cellule courante   |
| Ctrl+M L       | Afficher numéros de ligne       |
| Ctrl+M O       | Afficher/masquer sortie         |
| Ctrl+M X       | Couper la cellule               |
| Ctrl+M C       | Copier la cellule               |
| Ctrl+M V       | Coller la cellule en-dessous    |
| Shift+Up/Down  | Sélectionner plusieurs cellules |
| Ctrl+F         | Rechercher et remplacer         |
| Ctrl+S         | Sauvegarder le notebook         |

: Raccourcis Windows/Linux {#tbl-windows-linux tbl-colwidths="[25,75]"}

## Mac

| Raccourci      | Action                          |
|:---------------|:--------------------------------|
| ⌘+M H         | Voir les raccourcis clavier     |
| ⌘+Enter       | Exécuter la cellule courante    |
| Shift+Enter    | Exécuter et passer à la suivante|
| Option+Enter   | Exécuter et insérer dessous     |
| ⌘+M A         | Insérer cellule code au-dessus  |
| ⌘+M B         | Insérer cellule code en-dessous |
| ⌘+M M         | Convertir en cellule texte      |
| ⌘+M Y         | Convertir en cellule code       |
| ⌘+M D         | Supprimer la cellule courante   |
| ⌘+M L         | Afficher numéros de ligne       |
| ⌘+M O         | Afficher/masquer sortie         |
| ⌘+M X         | Couper la cellule               |
| ⌘+M C         | Copier la cellule               |
| ⌘+M V         | Coller la cellule en-dessous    |
| Shift+Up/Down  | Sélectionner plusieurs cellules |
| ⌘+F           | Rechercher et remplacer         |
| ⌘+S           | Sauvegarder le notebook         |

: Raccourcis Mac {#tbl-mac tbl-colwidths="[25,75]"}

:::

### Problèmes courants et solutions

1. **Déconnexions du Runtime** :
   - Cliquez sur **"Reconnecter"** quand demandé
   - Vos variables seront réinitialisées, mais le code sauvegardé reste

2. **Problèmes d'installation de packages** :
   - Redémarrez le runtime après l'installation de nouveaux packages
   - Utilisez `Runtime` > `Redémarrer le runtime`

3. **Erreurs de mémoire** :
   - Effacez les variables inutiles au fur et à mesure
   - Envisagez d'utiliser des échantillons de données plus petits pendant le développement

::: {.callout-important}
Les erreurs de mémoire sont fréquentes lors du travail avec de grands jeux de données ou des modèles complexes sur la version gratuite de Colab. Si vous rencontrez ces problèmes, envisagez d'utiliser une version payante de Colab ou de connecter une machine virtuelle Google Cloud Platform (VM).
:::

### Obtenir de l'aide

- Accédez à la documentation Colab : `Aide` > `Questions fréquemment posées`
- Essayez d'utiliser Google Gemini pour l'assistance IA.

---

## Assistance IA dans Colab

Google Gemini est un puissant assistant IA intégré à Google Colab. Vous pouvez l'utiliser pour générer du code, des commentaires ou du texte markdown pour améliorer vos notebooks. Gemini est accessible de plusieurs façons dans Colab, toutes commençant par la sélection de l'icône Gemini dans différentes parties de l'éditeur de notebook.

::: {.callout-note}
# Icône Gemini

<img src="https://lh3.googleusercontent.com/c-z7BK6NYcQIruZJd9A4KI1m8YrBauXH0VRglPudmj9Fgr5yzgJCsnaZ5W_nxZnB2hazA9hsg05uX1djFYPbMS-DsbYXp6UtVKFfdicBfF8klhVshJ8" width="50" height="50">

Cherchez cette icône pour indiquer où vous pouvez cliquer pour accéder à Gemini dans Colab.
:::

Voici quelques façons d'utiliser Google Gemini efficacement dans Colab :

### Support par chat

Cliquez sur le bouton **Gemini** en haut à droite pour ouvrir une interface de chat où vous pouvez poser des questions sur votre code, déboguer des problèmes ou obtenir des explications sur des concepts. Cette option est particulièrement utile pour les débutants ou pour résoudre des problèmes complexes.

### Génération de code

Utilisez l'option **"Générer du code"** (l'icône étincelle) au-dessus de toute cellule de code **vide** pour générer du nouveau code basé sur votre description. Vous pouvez lui demander de faire différentes choses comme :

- Charger un jeu de données appelé `my_data.csv`
- Tracer un histogramme des données
- Construire un modèle pour prédire `y` à partir de `X`

### Explication de code

Utilisez l'option **"Expliquer le code"** (l'icône étincelle) au-dessus de toute cellule de code **complète** pour ouvrir une interface de chat qui expliquera automatiquement le code dans la cellule. C'est utile pour comprendre le code écrit par quelqu'un d'autre, apprendre de nouveaux concepts ou obtenir un second avis sur votre travail.

### Complétion de code

Colab fournit une autocomplétion intelligente pendant la saisie :

- Appuyez sur **Tab** pour accepter les suggestions
- Utilisez **Ctrl+Espace** (Cmd+Espace sur Mac) pour déclencher manuellement les suggestions
- Obtenez la documentation et les conseils de paramètres en temps réel

::: {.callout-note}
Bien que ces outils d'IA soient utiles, vérifiez et comprenez toujours le code qu'ils suggèrent avant de l'utiliser dans votre travail.
:::

---

## Accéder aux notebooks du cours

Tous les notebooks du cours sont hébergés sur GitHub et peuvent être accédés directement dans Google Colab. Il y a deux façons de les ouvrir :

### Méthode 1 : Liens directs

Chaque section de ce livre inclut des liens directs **"Ouvrir dans Colab"** pour les notebooks pertinents. Cliquez simplement sur le badge pour ouvrir le notebook :

Exemple [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/microsoft/PlanetaryComputerExamples/blob/main/tutorials/mosaiks.ipynb)

Cette méthode ouvrira une nouvelle copie du notebook tel qu'il est sauvegardé sur GitHub. Si vous avez déjà cliqué sur le badge une fois, fait des modifications et sauvegardé votre notebook, vous devrez naviguer vers votre dossier Drive où il est sauvegardé pour accéder à ces modifications.

::: {.callout-warning}
Cliquer sur le badge dans ce livre ouvrira toujours une nouvelle copie.
:::

### Méthode 2 : Cloner le notebook

Pour sélectionner un notebook du dépôt [Dépôt de notebooks](https://github.com/cullen-molitor/MOSAIKS-Training-Manual/tree/main/notebooks/demo) :

1. Ouvrez Google Colab ([colab.research.google.com](https://colab.research.google.com))
2. Cliquez sur `Fichier` > `Ouvrir un notebook`
3. Sélectionnez l'onglet **GitHub**
4. Entrez l'URL du dépôt : `https://github.com/[username]/[repo]` (À METTRE À JOUR AVEC LE DÉPÔT)
5. Sélectionnez le notebook que vous voulez ouvrir

### Sauvegarder votre travail

Quand vous ouvrez un notebook depuis GitHub dans Colab, il crée une copie temporaire. Pour sauvegarder votre travail :

1. Cliquez sur `Fichier` > `Enregistrer une copie dans Drive`
2. Cela crée votre propre copie modifiable dans votre Google Drive
3. Toutes les modifications futures seront sauvegardées dans votre copie

### Organisation des notebooks

Les notebooks du cours sont organisés en :

- `demos/` : Notebooks de démonstration complets
- `exercises/` : Notebooks interactifs avec exercices à compléter
- `solutions/` : Versions complètes des notebooks d'exercices

Chaque notebook inclut :

- Instructions claires et explications en cellules markdown
- Cellules de code avec exemples ou exercices
- Sections À FAIRE pour les exercices
- Cellules de validation pour vérifier votre travail

---

## Accès et gestion des données

Il existe plusieurs façons d'accéder aux données dans les notebooks Colab. Voici les principales approches :

### Téléchargements directs

Pour les données hébergées sur des dépôts comme Zenodo, vous pouvez télécharger directement en utilisant `wget` :

```python
# Télécharger les données
!wget https://zenodo.org/records/14040658/files/Data.zip

# Décompresser les données
!unzip Data.zip
```

### Intégration Google Drive

#### Monter Google Drive

Pour les données stockées dans Google Drive :

1. D'abord, montez votre Google Drive :
   ```python
   from google.colab import drive
   drive.mount('/content/drive')
   ```

2. Accédez à vos données en utilisant le chemin monté :
   ```python
   drive_path = "/content/drive/MyDrive/<dossier_projet>"
   ```

#### Copier les données vers la VM (optionnel)

Pour de meilleures performances, faites des copies locales des données sur la machine virtuelle (VM) :

```python
import os
import shutil

# Créer un répertoire local
local_dir = "/content/data/"
os.makedirs(local_dir, exist_ok=True)

# Copier les données de Drive vers la VM
drive_data = os.path.join(drive_path, "my_data") 
shutil.copytree(drive_data, local_dir, dirs_exist_ok=True)
```

::: {.callout-note}
N'oubliez pas que le stockage de la VM est temporaire - les fichiers seront supprimés à la déconnexion du runtime. Gardez toujours une sauvegarde de vos données dans Drive ou un autre emplacement de stockage permanent.
:::

##### Pourquoi copier les données vers la VM ?

Lors du travail avec des données dans Colab, copier les fichiers de Google Drive vers la machine virtuelle (VM) peut améliorer significativement les performances :

1. **Accès plus rapide** : La lecture directe depuis Google Drive nécessite un transfert de données sur le réseau pour chaque opération. Le stockage local de la VM offre des vitesses de lecture/écriture beaucoup plus rapides.
2. **Latence réduite** : La latence réseau entre Colab et Google Drive peut ralentir les opérations nécessitant plusieurs accès aux données. Les données locales éliminent cette latence.
3. **Plus fiable** : Les problèmes de connectivité réseau ou d'accès à Drive n'interrompront pas votre analyse une fois les données copiées localement.
4. **Meilleur pour le traitement itératif** : Si votre code doit lire les mêmes données plusieurs fois (comme dans les boucles d'entraînement d'apprentissage automatique), l'accès local est beaucoup plus efficace.

Par exemple, lire un jeu de données de 1 Go depuis Drive peut prendre 30 secondes, tandis que la lecture depuis le stockage local de la VM pourrait prendre quelques secondes. Le temps passé à copier les données une fois au début de votre session peut économiser un temps significatif pendant l'analyse. C'est particulièrement vrai dans un environnement notebook où un utilisateur peut développer du code qui accède répétitivement aux mêmes fichiers de données, mais ne peut pas tout stocker en mémoire (par exemple, de nombreux fichiers images).

#### Sauvegarder les sorties vers Google Drive

Pour sauvegarder les sorties ou les modèles vers Google Drive :

```python
# Définir le répertoire de sortie
output_dir = "/content/drive/MyDrive/project_folder/output"

# Sauvegarder les sorties
shutil.copytree(local_output, output_dir, dirs_exist_ok=True)
```

Cela garantit que tout travail effectué dans le notebook est sauvegardé dans votre Google Drive pour référence future. Si les fichiers de sortie ne sont pas copiés et restent dans la VM, ils seront perdus à la déconnexion du runtime.

---

## Configuration de l'environnement local

Bien que l'approche principale de ce livre soit d'utiliser Google Colab, certains apprenants peuvent préférer ou avoir besoin d'exécuter le code localement. Le livre est largement configuré pour cela, bien que l'utilisateur doive gérer son propre environnement informatique. Pour cela, nous fournissons un fichier `environment.yml` (situé dans le répertoire `environment` de ce livre). Voici les étapes pour vous installer Miniconda et créer un environnement local.

::: {.callout-note}
Bien que les environnements locaux puissent offrir plus de contrôle, nous recommandons fortement Google Colab pour la cohérence et les ressources cloud gratuites. Cette configuration locale est purement optionnelle et pourrait être plus adaptée pour ceux ayant des dépendances particulières ou des configurations avancées.
:::

### Télécharger et installer Miniconda

Miniconda est un installateur minimal pour conda. Choisissez l'installateur pour votre système d'exploitation parmi les liens ci-dessous et suivez les invites.

::: {.panel-tabset}

## Windows

1. Allez sur l'[Installateur Windows Miniconda](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links).
2. Téléchargez l'installateur `.exe` pour votre système Windows (64-bit recommandé).
3. Double-cliquez sur l'installateur et suivez les instructions à l'écran.
4. Quand demandé, cochez l'option **Ajouter Miniconda au PATH** ou sélectionnez "Installer pour tous les utilisateurs" qui ajoute généralement conda au PATH automatiquement.

## macOS

1. Allez sur l'[Installateur macOS Miniconda](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links).
2. Téléchargez l'installateur `.pkg` (ou `.sh` si vous préférez) pour macOS (64-bit).
3. Double-cliquez sur l'installateur et suivez les instructions à l'écran.
4. Quand demandé, cochez l'option **Ajouter Miniconda au PATH** ou ajoutez manuellement les lignes de chemin appropriées à votre fichier `~/.zshrc` ou `~/.bash_profile`.

## Linux

1. Allez sur l'[Installateur Linux Miniconda](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links).
2. Téléchargez l'installateur `.sh` pour votre distribution Linux (64-bit recommandé).
3. Ouvrez un terminal et exécutez `bash Miniconda3-latest-Linux-x86_64.sh`.
4. Suivez les invites ; envisagez de permettre à l'installateur d'initialiser Miniconda pour votre shell (ajoutant conda à votre PATH).

:::

### Ajouter conda à votre PATH

Si vous n'avez pas ajouté conda à votre PATH pendant l'installation, vous pouvez le faire manuellement en ajoutant une ligne à votre fichier de configuration shell (`~/.bashrc`, `~/.zshrc`, ou similaire) :

```bash
# Exemple pour les utilisateurs Linux/macOS
export PATH="$HOME/miniconda3/bin:$PATH"
```

Pour Windows, assurez-vous d'avoir sélectionné l'option d'ajouter conda au PATH pendant l'installation, ou exécutez l'**Invite Anaconda** (qui a automatiquement conda disponible) pour gérer votre environnement.

### Créer un environnement local depuis `environment.yml`

Dans le répertoire `environment` du dépôt du cours, vous trouverez un fichier nommé `environment.yml`. Ce fichier liste tous les packages nécessaires pour la configuration locale.

1. **Clonez ou téléchargez** le dépôt du livre sur votre machine locale.
2. **Ouvrez un terminal** (ou **Invite Anaconda** sur Windows).
3. **Naviguez** vers le dossier contenant `environment.yml`.

   ```bash
   cd chemin/vers/MOSAIKS-Training-Manual/environment
   ```

4. **Créez** l'environnement :

   ```bash
   conda env create -f environment.yml
   ```

5. **Activez** l'environnement :

   ```bash
   conda activate <nom_environnement>
   ```

   Où `<nom_environnement>` est le nom spécifié dans `environment.yml` (vérifiez le champ `name:` dans le fichier). Dans ce cas, le nom est `mosaiks`.

### Utiliser le nouvel environnement dans VS Code

Visual Studio Code (VS Code) peut détecter et utiliser votre nouvel environnement conda pour le développement Python.

1. **Ouvrez VS Code**.
2. Installez l'**extension Python** (si pas déjà installée).
3. Appuyez sur **Ctrl+Shift+P** (ou **Cmd+Shift+P** sur macOS) et tapez **"Python : Sélectionner l'interpréteur"**.
4. Sélectionnez l'interpréteur associé à votre environnement nouvellement créé (il devrait être listé par nom ou chemin).
5. Ouvrez ou créez un nouveau fichier Python ou notebook, et vérifiez que VS Code utilise le bon environnement (vous pouvez voir l'environnement choisi en bas à droite de VS Code).

### Autres gestionnaires d'environnement

Bien que conda soit un outil commun pour gérer les environnements Python, il existe d'autres options populaires comme :

- [Poetry](https://python-poetry.org/)  
- [pipenv](https://pipenv.pypa.io/en/latest/)  
- [virtualenv](https://virtualenv.pypa.io/en/latest/) 

Chacun a ses propres fichiers de configuration et instructions d'installation. Si vous préférez ces outils ou les utilisez déjà, vous pouvez généralement reproduire les packages listés dans `environment.yml`. Consultez la documentation respective de l'outil pour des instructions spécifiques sur la façon de traduire les dépendances.

---

::: {.callout-note}
# Perspectives

Dans le prochain chapitre, nous examinerons de plus près le framework MOSAIKS, ses concepts fondamentaux et comment il peut être appliqué pour résoudre des problèmes du monde réel.
:::